---
title: "Sim_Alphabet"
format: html
editor: visual
---

## Quarto

```{r}
# Libraries
rm(list=ls())
library(tidyverse)
library(purrr)
library(parallel)

# Setting the Context

candidate_pool_size <- 1000
school_number <- 100
weight_rank <- 400
candidate_error <- 200
school_error <- 200
competitiveness <- 10
scale_options <- c(1,2,3,4,5,10,20,30,40,50,60,70,80,90,100,150,200,250,300,350,400)
numCores <- detectCores()-1

# Formula for total job openings, as a function of the pool size and competitiveness

total_openings <- candidate_pool_size/competitiveness
openings_per_school <- total_openings/school_number

# Function defining the value of a candidate in general

value_of_candidate <- function(rank_scaled,letter_scaled,weight_rank,weight_letter,candidate_error){
  weight_rank*-rank_scaled+weight_letter*-letter_scaled+rnorm(1,mean=0,sd=candidate_error) # weight times value + random error incorporating other unobservable candidate attributes like quality
}

# School Choice Function

school_choice <- function(df,school_error,openings_per_school){
  top_choices <- df %>%
  mutate(value_to_school = candidate_value + rnorm(n(),mean=0,sd=school_error)) %>% # assigns each candidate a value based on school's idiosyncratic preferences that differ from observable characteristics of candidates
  arrange(desc(value_to_school)) %>% # orders DF by value to school
  slice_head(n = openings_per_school) # extracts only the top-valued candidates
  
return(top_choices)
}

# Initializing Sim

pb <- txtProgressBar(min = 0, max = 1000, style = 3) # set a progress bar
full_results <- data.frame()

for (x in 1:1000){

# Creating A Set of Hypothetical Candidates


candidate_pool <- data.frame(
  candidate_id = sprintf("%05d", 1:(candidate_pool_size*10)),
  year = rep(1:10,each = candidate_pool_size), # adding a year variable
  school_origin_rank = rep(1:school_number,candidate_pool_size*10/school_number)) %>% # an even number from each school
  mutate(letter = sample(1:26,candidate_pool_size*10,replace=TRUE)) %>% # adding randomly drawn letter of last name
  mutate(
    rank_scaled = as.vector(scale(school_origin_rank)), # scaling school_origin_rank variable
    letter_scaled = as.vector(scale(letter))) %>% # scaling letter variable
  arrange(school_origin_rank) # arranging by rank

# Initializing Loop over weights

results <- data.frame()
temp_results <- data.frame()

results <- map(scale_options,function(weight_letter) {
  
# Applying Candidate Value function to each candidate

candidate_pool <- candidate_pool %>%
  rowwise() %>% 
  mutate(candidate_value = value_of_candidate(rank_scaled,letter_scaled,weight_rank,weight_letter,candidate_error)) %>% # applies the value_of_candidates function to each row to find each candidates unobserved value
  ungroup() 
  
# Iterative Application To Schools

hired_pool <- data.frame() # initializing empty DF of hired candidates 

for (y in 1:20){
  
current_year_candidates <- candidate_pool %>% filter(year == y) # isolating the current year of candidates
remaining_candidate_pool <- current_year_candidates # intializing remaining candidates

for (i in 1:school_number){ # each school selects in turn of its rank
  selections <- school_choice(remaining_candidate_pool,school_error,openings_per_school) # extracts each school's top candidates from the remaining candidates 
  selections$School_Hired_Rank <- i # denotes their new school
  hired_pool <- rbind(hired_pool,selections) # collects these selections in a DF
  remaining_candidate_pool <- anti_join(remaining_candidate_pool,selections,by="candidate_id") # removes selected candidates from futuring hiring
} # closes single year loop over schools choosing
} # closes loop over years

# Adding Hired Variable to original candidate_pool DF

hired_pool$hired <- 1 
candidate_pool_regression <- left_join(candidate_pool,hired_pool %>% select(candidate_id, hired),by="candidate_id") %>%
  mutate(hired = ifelse(is.na(hired),0,1))

# Regressions

model1 <- lm(School_Hired_Rank ~ school_origin_rank + letter, data = hired_pool) # DV = Placement Rank

model2 <- glm(hired ~ school_origin_rank + letter, data = candidate_pool_regression,family=binomial(link="logit")) # DV = Hired or Not

model3 <- lm(school_origin_rank ~ School_Hired_Rank + letter, data = hired_pool) # DV is school of origin -- testing for differential effects in hiring that do not appear in rank data

# Significance Test

temp_results <- data.frame(
  rank_test = NA,
  hired_test = NA,
  inverted_test = NA
)

if (sign(coefficients(model1)[3])==1 & summary(model1)$coefficients[,"Pr(>|t|)"][3] <0.05){
  temp_results$rank_test = 1
} else {temp_results$rank_test = 0} # if the coefficient for letter is positive and significant, return a 1, otherwise a 0 for the rank test

if (sign(coefficients(model2)[3])==-1 & summary(model2)$coefficients[,"Pr(>|z|)"][3] <0.05){
  temp_results$hired_test = 1
} else {temp_results$hired_test = 0} # if the coefficient for letter is positive and significant, return a 1, otherwise a 0 for the hired test

if (sign(coefficients(model3)[3])==-1 & summary(model3)$coefficients[,"Pr(>|t|)"][3] <0.05){
  temp_results$inverted_test = 1
} else {temp_results$inverted_test = 0} # if the coefficient for letter is positive and significant, return a 1, otherwise a 0 for the inverse test

temp_results <- cbind(weight_letter,temp_results)
}) %>% bind_rows(temp_results)

full_results <- rbind(full_results,results)
setTxtProgressBar(pb, x) # updates progress bar

} # closing Sim

final_results <- full_results %>%
  group_by(weight_letter) %>%
  summarize(
    Rank_Test = mean(rank_test),
    Hired_Test = mean(hired_test),
    Inverted_Test = mean(inverted_test)
  )

final_results <- final_results %>% mutate(
  weight_letter = weight_letter/400
)

```
